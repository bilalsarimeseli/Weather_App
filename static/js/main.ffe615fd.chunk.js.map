{"version":3,"sources":["components/weather.component.jsx","components/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celcius","min","max","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","text-md","API_key","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celcius","calCelcius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeID","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffe615fd.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Weather = (props) => {\n    return(\n        <div className=\"container\">\n            <div className=\"cards cards pt-4\">\n                <h1>{props.city}</h1>\n            <h5 className=\"py-4\">\n                <i className = {`wi ${props.weatherIcon} display-1`}/>\n            </h5> \n    {props.temp_celcius ? (<h1 className=\"py-2\">{props.temp_celcius}&deg;</h1>):null} \n\n            {/** Show max and min temperature */}\n            {minmaxTemp(props.temp_min, props.temp_max)}\n    <h4 className=\"py-3\">{props.description}</h4>\n\n            </div>\n        </div>\n    );\n}\n\nfunction minmaxTemp(min, max){\n    if(min && max){\n        return(\n            <h3>\n            <span className=\"px-4\">{min}&deg;</span>\n            <span className=\"px-4\">{max}&deg;</span>\n            </h3>\n            )\n    }\n    \n}\nexport default Weather; \n\n\n","import React from 'react';\nimport './form.style.css';\n\nconst Form = props => {\n    return (\n        <div className=\"container\">\n            <div>\n                {props.error ? error() : null }\n            </div>\n            <form onSubmit = {props.loadweather}>\n            <div className=\"row\">\n                <div className=\"col-md-3 offset-md-2\">\n                    <input \n                    type=\"text\" \n                    className=\"form-control\" \n                    name = \"city\" \n                    autoComplete = \"off\" \n                    placeholder = \"City\"/>\n                </div>\n                <div className=\"col-md-3\">\n                <input \n                type=\"text\" \n                className=\"form-control\" \n                name = \"country\" \n                autoComplete = \"off\"\n                placeholder = \"Country\"/>\n                </div>\n                <div className=\"col-md-3 mt-md-0 text-md-left\" text-md= 'true'>\n                    <button className = \"btn btn-warning\">Get Weather Info</button>\n\n                </div>\n            </div>\n\n            </form>\n        </div>\n    )\n}\n\nfunction error() {\n    return (\n        <div className=\"alert alert-danger mx-5\" role = \"alert\">\n             Please City and Country\n        </div>\n       \n    )\n\n}\n\nexport default Form;","import React from \"react\";\nimport \"./App.css\";\n\nimport \"weather-icons/css/weather-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Weather from \"./components/weather.component\";\nimport Form from \"./components/form.component\";\n\nconst API_key = \"1810792d3ad332dafa58e6c7c7d98225\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celcius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  calCelcius(temp) {\n    let cel = Math.floor(temp - 273.15);\n    return cel;\n  }\n\n  get_WeatherIcon(icons, rangeID) {\n    switch (true) {\n      case rangeID >= 200 && rangeID <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\n        break;\n      case rangeID >= 300 && rangeID <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle });\n        break;\n      case rangeID >= 500 && rangeID <= 531:\n        this.setState({ icon: this.weatherIcon.Rain });\n        break;\n      case rangeID >= 600 && rangeID <= 622:\n        this.setState({ icon: this.weatherIcon.Snow });\n        break;\n      case rangeID >= 701 && rangeID <= 781:\n        this.setState({ icon: this.weatherIcon.Atmosphere });\n        break;\n      case rangeID === 800:\n        this.setState({ icon: this.weatherIcon.Clear });\n        break;\n      case rangeID >= 801 && rangeID <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n      default:\n        this.setState({ icon: this.weatherIcon.Clouds });\n    }\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    if(city && country){\n            const api_call = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city}, ${country} &appid=${API_key}`\n    );\n    const response = await api_call.json();\n    console.log(response);\n\n    this.setState({\n      city: `${response.name}, ${response.sys.country}`,\n      celcius: this.calCelcius(response.main.temp),\n      temp_max: this.calCelcius(response.main.temp_max),\n      temp_min: this.calCelcius(response.main.temp_min),\n      description: response.weather[0].description\n    });\n\n    this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n  } else {\n    this.setState({error: true})\n  }\n    }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadweather = {this.getWeather} error={this.state.error}/>\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          temp_celcius={this.state.celcius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n          weatherIcon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}